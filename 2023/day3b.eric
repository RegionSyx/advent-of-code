is_blank(x) = eq(x, "")
not(x) = pyeval("not(x)")

enumerate(d) = pyeval("tuple(enumerate(d))")
getd(d, i, de) = pyeval("d[i]")
append(d, item) = pyeval("d +(item,)")
flatten(d) = pyeval("tuple([item for row in d for item in row])")
vec_add(a, b) = (add(first(a), first(b)), add(second(a), second(b)))
neighbors = (
        (sub(0, 1), sub(0, 1)),
        (sub(0, 1), 0),
        (sub(0, 1), 1),
        (0, sub(0, 1)),
        (0, 1),
        (1, sub(0, 1)),
        (1, 0),
        (1, 1),
    )
contains(d, x) = pyeval("x in d")

stdin as input


input
split("\n") as lines
enumerate
    _ as data
    first(data) as row
    second(data) as line

    line
    list
    enumerate
        _ as data
        first(data) as col
        second(data) as value

        len(lines) as max_row
        len(line) as max_col


        max((sub(row, 1), 0)) as top
        min((add(row, 2), max_row)) as bottom
        max((sub(col, 3), 0)) as left
        min((add(col, 4), max_col)) as right

        sub(row, top) as mid_row
        sub(col, left) as mid_col

        slice(lines, top, bottom) as minimap
            slice(_, left, right)
            replace(".", " ")
            replace("*", " ")
            replace("#", " ")
            replace("$", " ")
            replace("+", " ")
            replace("@", " ")
            replace("-", " ")
            replace("&", " ")
            replace("/", " ")
            replace("%", " ")
            replace("=", " ")
            list
        _

        get(minimap, mid_row) as the_mid_row
        set(the_mid_row, mid_col, "*") as updated_row
        set(minimap, mid_row, updated_row) as minimap

        if(eq(value, "*"), minimap, false)
    filter
        not(eq(_, false))
flatten as minimaps


minimaps
    _ as sublines

    sublines
        list
    enumerate
        _ as arg
        first(arg) as row
        second(arg) as line

        line
        enumerate
            _ as arg
            first(arg) as col
            second(arg) as d
            
            ((row, col), d)
    flatten
    _ as puzzle_map
    transpose as puzzle_parts
    first(puzzle_parts) as puzzle_keys
    second(puzzle_parts) as puzzle_values

    puzzle_values
        eq("*")
        if("*", ".")
    _ as mask

    range(0, 4)
    reduce(mask)
        _1 as data
        _2 as acc

        acc
        enumerate
        filter
            second
            eq("*")
        _
            _ as data
            get(puzzle_keys, first(data)) as pos

            neighbors
                vec_add(pos)
        flatten
        distinct
        _ as to_mark

        puzzle_values
        enumerate
        filter
            second(_) as value
            isdigit
        _
            first as i
            get(puzzle_keys, i)
        _ as numbers

        intersect(numbers, to_mark) as to_update

        acc
        enumerate
            _ as data
            first(data) as i
            second(data) as value

            get(puzzle_keys, i) as key
            contains(to_update, key)
            if("*", value)
        _
    _ as mask
    
    sublines
    enumerate
        _ as data
        first(data) as row
        second(data) as line

        line
        list
        enumerate
            _ as data
            first(data) as col
            second(data) as value

            puzzle_keys
            index((row, col)) as mask_index

            get(mask, mask_index) as mask_value

            if(eq(mask_value, "*"), value, ".")
        join("")
        replace(".", " ")
        replace("*", " ")
        replace("#", " ")
        replace("$", " ")
        replace("+", " ")
        replace("@", " ")
        replace("-", " ")
        replace("&", " ")
        replace("/", " ")
        replace("%", " ")
        replace("=", " ")
        strip
        split(" ")
        filter
            not(is_blank(_))
        _
            int
    flatten
filter
    len
    eq(2)
_
    _ as data
    mul(first(data), second(data))
sum
print